---
title: "Class 10: Halloween Candy Mini Project"
author: "Barry"
format: gfm
---

# Background

In this mini-project we will examine 538 Halloween Candy data.
What is your favorite candy? What is nougat anyway? And how do you say it in America?

First step is to read the data...

```{r}
candy <- read.csv("candy-data.csv", row.names=1)
head(candy)
```

> Q1. How many different candy types are in this dataset?

```{r}
nrow(candy)
```

> Q2. How many fruity candy types are in the dataset?

```{r}
sum(candy$fruity)
```

```{r}
candy["Twix", ]$winpercent
```

```{r}
rownames(candy)
```

```{r}
candy["Milky Way", ]
```

```{r}
candy["Sour Patch Kids",]$winpercent
```
```{r}
candy["Dum Dums",]$winpercent
```

```{r}
skimr::skim(candy)
```

> Q6. Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

winpercent



> Q8. Plot a histogram of winpercent values

```{r}
hist(candy$winpercent)
```


```{r}
library(ggplot2)

ggplot(candy) +
  aes(winpercent) +
  geom_histogram(bins=10, col="red", fill="yellow")
  
```


> Q11. On average is chocolate candy higher or lower ranked than fruit candy?

```{r}
chocolate.inds <- as.logical(candy$chocolate)
chocolate.win <- candy[chocolate.inds,]$winpercent
mean(chocolate.win)
```

And for fruit candy...
```{r}
fruit.inds <- as.logical(candy$fruity)
fruit.win <- candy[fruit.inds,]$winpercent
mean(fruit.win)
```

```{r}
t.test(chocolate.win, fruit.win)
```

# 3. Overall Candy Rankings

The base R `sort()` and `order()` functions are very useful!

```{r}
x <- c(5,1,2,6)

sort(x)
```
```{r}
x[ order(x) ]
```
```{r}
y <- c("barry", "alice", "chandra")
y
sort(y)
order(y)
```

First I want to order/arrange the whole dataset by winpercent values

```{r}
inds <- order(candy$winpercent)

head(candy[inds,], n=5)
```

# Barplot

The default barplot, made with `geom_col()` has the bars in the order they are in the dataset...

```{r}
ggplot(candy) + 
  aes(winpercent, rownames(candy)) +
  geom_col()
```

```{r}
p <- ggplot(candy) + 
      aes(winpercent, reorder( rownames(candy), winpercent)) +
       geom_col()

```

```{r}
ggsave("mybarplot.png", p)
```

```{r}
p
```

Letâ€™s setup a color vector (that signifies candy type) that we can then use for some future plots. We start by making a vector of all black values (one for each candy). Then we overwrite chocolate (for chocolate candy), brown (for candy bars) and red (for fruity candy) values.

```{r}
my_cols <- rep("black", nrow(candy))
#my_cols
my_cols[ as.logical(candy$chocolate) ] <- "chocolate"
my_cols[ as.logical(candy$bar) ] <- "brown" 
my_cols[ as.logical(candy$fruity) ] <- "red" 
my_cols
```

Now I can use this vector to color up my barplot


```{r}
ggplot(candy) + 
  aes(winpercent, reorder( rownames(candy), winpercent)) +
  geom_col(fill=my_cols)

```

# 4. Taking a look at pricepercent

What about value for money? 
What is the the best candy for the least money? 

One way to get at this would be to make a plot of `winpercent` vs the `pricepercent` variable. 

```{r}
ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) +
  geom_text(col=my_cols)
```

This plot sucks! I can not read the labels... 
We can use ggrepl package to help with this

```{r}
library(ggrepel)

ggplot(candy) +
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=my_cols) +
  geom_text_repel(col=my_cols, max.overlaps = 7)
```


# 5. Exploring the correlation structure

```{r}
library(corrplot)
```

```{r}
cij <- cor(candy)
corrplot(cij)
```

# PCA: Principal Component Analysis

The main function that always there for us is `prcomp()`. It has an important argument that is set to `scale=FALSE`. 

```{r}
pca <- prcomp(candy, scale=TRUE)
summary(pca)
```

My PCA plot (a.k.a.) PC1 vs PC2 score plot.

```{r}
plot(pca$x[,1], pca$x[,2], col=my_cols, pch=16) 
```

I will make a "nicer" plot with ggplot. 
ggplot only works with data.frames as input so I need to make one for it first...


```{r}
# Make a new data-frame with our PCA results and candy data
my_data <- cbind(candy, pca$x[,1:3])
```

```{r}
ggplot(my_data) +
  aes(PC1, PC2, label=rownames(my_data)) +
  geom_point(col=my_cols) +
  geom_text_repel(col=my_cols, max.overlaps = 7)
```

```{r}
summary(pca)
```



